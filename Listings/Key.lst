C51 COMPILER V9.57.0.0   KEY                                                               05/29/2025 22:37:41 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN .\Objects\Key.obj
COMPILER INVOKED BY: E:\Study\Keil\keil c51\KeilData\C51\BIN\C51.EXE Key.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND P
                    -RINT(.\Listings\Key.lst) OBJECT(.\Objects\Key.obj)

line level    source

   1          #include <REGX52.H>
   2          #include "Delay.h"
   3          #include "Motor.h"
   4          #include "Key.h"
   5          #include "LCD1602.h"
   6          #include "LightControl.h"
   7          
   8          // 定义全局变量
   9          unsigned char current_mode = MODE_MANUAL;      // 默认为手动模式
  10          unsigned char current_direction = DIR_CLOCKWISE; // 默认为顺时针方向
  11          unsigned char scroll_position = 0;             // 滚动位置
  12          unsigned char scroll_counter = 0;              // 滚动计数器
  13          
  14          // 引用外部变量（定义在LightControl.c中）
  15          extern bit show_mode_flag;
  16          extern unsigned int mode_display_counter;
  17          
  18          /**
  19           * @brief 在LCD上滚动显示文本
  20           * @param line 行号(1或2)
  21           * @param column 起始列号(1-16)
  22           * @param text 要显示的文本
  23           * @param max_len 显示区域最大长度
  24           */
  25          void scroll_text(unsigned char line, unsigned char column, char *text, unsigned char max_len) {
  26   1          unsigned char i;
  27   1          unsigned char text_len = 0;
  28   1          unsigned char display_len;
  29   1          char display_text[17] = {0}; // 最大16个字符+结束符
  30   1          
  31   1          // 计算文本实际长度
  32   1          while(text[text_len] != '\0') text_len++;
  33   1          
  34   1          // 如果文本长度小于等于最大显示长度，无需滚动
  35   1          if(text_len <= max_len) {
  36   2              LCD_ShowString(line, column, text);
  37   2              return;
  38   2          }
  39   1          
  40   1          // 确定要显示的长度
  41   1          display_len = (text_len < max_len) ? text_len : max_len;
  42   1          
  43   1          // 拷贝要显示的部分
  44   1          for(i = 0; i < display_len; i++) {
  45   2              display_text[i] = text[(i + scroll_position) % text_len];
  46   2          }
  47   1          display_text[display_len] = '\0'; // 字符串结束符
  48   1          
  49   1          // 显示文本
  50   1          LCD_ShowString(line, column, display_text);
  51   1          
  52   1          // 更新滚动位置
  53   1          scroll_counter++;
  54   1          if(scroll_counter >= 2) { // 每隔一定时间滚动一次
C51 COMPILER V9.57.0.0   KEY                                                               05/29/2025 22:37:41 PAGE 2   

  55   2              scroll_counter = 0;
  56   2              scroll_position = (scroll_position + 1) % text_len;
  57   2          }
  58   1      }
  59          
  60          /**
  61           * @brief 获取按键状态并进行消抖处理
  62           * @return 返回按键状态码：
  63           *         -1: 无按键
  64           *         0: 方向按键按下
  65           *         1: 模式按键按下
  66           *         2: 两个按键同时按下
  67           */
  68          int get_key_status(void) {
  69   1          if (KEY_DIRECTION == 0 && KEY_MODE == 0) return BOTH_KEYS_PRESSED;  // 同时按下
  70   1          if (KEY_DIRECTION == 0) return DIRECTION_KEY_PRESSED;               // 方向键按下
  71   1          if (KEY_MODE == 0) return MODE_KEY_PRESSED;                         // 模式键按下
  72   1          return NO_KEY_PRESSED;                                              // 无按键
  73   1      }
  74          
  75          /**
  76           * @brief 处理方向切换按键
  77           */
  78          void handle_direction_key() {
  79   1          // 切换方向
  80   1          current_direction = !current_direction;
  81   1          
  82   1          // 根据当前模式和方向执行相应操作
  83   1          if (current_mode == MODE_MANUAL) {
  84   2              unsigned char i;
  85   2              // 手动模式下执行单步操作（24步）
  86   2              for(i = 0; i < 24; i++) {
  87   3                  step_motor(current_direction);
  88   3                  Delay_ms(20);  // 控制转速
  89   3              }
  90   2          }
  91   1      }
  92          
  93          /**
  94           * @brief 处理模式切换按键
  95           */
  96          void handle_mode_key() {
  97   1          // 切换模式
  98   1          current_mode = !current_mode;
  99   1          
 100   1          // 更新LCD显示模式信息
 101   1          display_mode_status();
 102   1          
 103   1          // 设置显示模式标志，使main函数显示模式信息一段时间
 104   1          show_mode_flag = 1;
 105   1          mode_display_counter = 0;
 106   1      }
 107          
 108          /**
 109           * @brief 在LCD上显示当前模式状态
 110           */
 111          void display_mode_status() {
 112   1          // 清空LCD第一行和第二行
 113   1          LCD_ShowString(1, 1, "                ");
 114   1          LCD_ShowString(2, 1, "                ");
 115   1          
 116   1          // 居中显示模式文本
C51 COMPILER V9.57.0.0   KEY                                                               05/29/2025 22:37:41 PAGE 3   

 117   1          LCD_ShowString(1, 3, "Current Mode:");
 118   1          
 119   1          if (current_mode == MODE_MANUAL) {
 120   2              LCD_ShowString(2, 5, "MANUAL");
 121   2          } else {
 122   2              LCD_ShowString(2, 6, "AUTO");
 123   2          }
 124   1      }
 125          
 126          /**
 127           * @brief 处理按键事件
 128           * @param last_key 上一次按键状态
 129           * @param current_key 当前按键状态
 130           */
 131          void handle_key_events(int *last_key, int current_key) {
 132   1          // 如果当前没有按键按下，重置状态
 133   1          if (current_key == NO_KEY_PRESSED) {
 134   2              *last_key = NO_KEY_PRESSED;
 135   2              return;
 136   2          }
 137   1      
 138   1          // 如果当前两个键都按下，忽略动作
 139   1          if (current_key == BOTH_KEYS_PRESSED) {
 140   2              *last_key = BOTH_KEYS_PRESSED;
 141   2              return;
 142   2          }
 143   1      
 144   1          // 如果当前只有一个键按下，并且上一次未按下或不是同一种按键
 145   1          if (*last_key != current_key && *last_key != BOTH_KEYS_PRESSED) {
 146   2              // 延时5ms去抖动
 147   2              Delay_ms(5);
 148   2      
 149   2              // 如果当前按键仍然处于按下状态
 150   2              if (current_key == DIRECTION_KEY_PRESSED && KEY_DIRECTION == 0) {
 151   3                  handle_direction_key();
 152   3              } else if (current_key == MODE_KEY_PRESSED && KEY_MODE == 0) {
 153   3                  handle_mode_key();
 154   3              }
 155   2          }
 156   1      
 157   1          *last_key = current_key;
 158   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    466    ----
   CONSTANT SIZE    =     60    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4      32
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
