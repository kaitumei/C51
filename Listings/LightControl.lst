C51 COMPILER V9.57.0.0   LIGHTCONTROL                                                      05/29/2025 22:37:42 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE LIGHTCONTROL
OBJECT MODULE PLACED IN .\Objects\LightControl.obj
COMPILER INVOKED BY: E:\Study\Keil\keil c51\KeilData\C51\BIN\C51.EXE LightControl.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJEC
                    -TEXTEND PRINT(.\Listings\LightControl.lst) OBJECT(.\Objects\LightControl.obj)

line level    source

   1          #include <REGX52.H>
   2          #include "Delay.h"
   3          #include "Motor.h"
   4          #include "LCD1602.h"
   5          #include "ADC0832.h"
   6          #include "Key.h"
   7          #include "LightControl.h"
   8          
   9          #define uchar unsigned char
  10          
  11          // 全局变量定义
  12          bit motor_running = 0;  // 电机运行状态标志
  13          bit show_mode_flag = 0; // 显示模式标志
  14          unsigned int mode_display_counter = 0; // 模式显示计数器
  15          uchar adc_value = 0;    // ADC原始值
  16          int lux_value = 0;      // 转换后的光照强度值
  17          
  18          // 光照强度等级文本
  19          const char *light_level_text[] = {"Low", "Medium", "High"};
  20          
  21          /**
  22           * @brief 获取光照等级文本
  23           * @param lux 光照强度值
  24           * @return 对应的光照等级文本
  25           */
  26          const char* get_light_level_text(int lux) {
  27   1          if (lux < NORMAL_LIGHT_MIN) return light_level_text[0]; // 0-299 Low
  28   1          else if (lux < STRONG_LIGHT) return light_level_text[1]; // 300-699 Medium
  29   1          else return light_level_text[2]; // 700+ High
  30   1      }
  31          
  32          /**
  33           * @brief 控制步进电机转动指定圈数
  34           * @param direction 转动方向
  35           * @param revolutions 转动圈数
  36           */
  37          void rotate_motor(unsigned char direction, unsigned int revolutions) {
  38   1          unsigned int i, j;
  39   1          motor_running = 1;
  40   1          
  41   1          for(i = 0; i < revolutions; i++) {
  42   2              for(j = 0; j < STEPS_PER_REVOLUTION; j++) {
  43   3                  step_motor(direction);
  44   3              }
  45   2          }
  46   1          
  47   1          motor_running = 0;
  48   1      }
  49          
  50          /**
  51           * @brief 显示光照强度信息
  52           * @param lux 光照强度值
  53           */
  54          void display_light_info(int lux) {
C51 COMPILER V9.57.0.0   LIGHTCONTROL                                                      05/29/2025 22:37:42 PAGE 2   

  55   1          // 显示光照强度
  56   1          LCD_ShowString(1, 1, "Light:    Lx    ");
  57   1          LCD_ShowNum(1, 7, lux, 4);
  58   1          
  59   1          // 清空第二行
  60   1          LCD_ShowString(2, 1, "                ");
  61   1      }
  62          
  63          /**
  64           * @brief 根据光照强度获取光照状态
  65           * @param lux_value 光照强度值
  66           * @return 光照状态：-1(其他光照)，0(正常光照)，1(强光)
  67           */
  68          int get_light_state(int lux_value) {
  69   1          if (lux_value >= STRONG_LIGHT) {
  70   2              return 1;  // 强光
  71   2          } else if (lux_value >= NORMAL_LIGHT_MIN && lux_value <= NORMAL_LIGHT_MAX) {
  72   2              return 0;  // 正常光照
  73   2          } else {
  74   2              return -1; // 其他光照（不处理）
  75   2          }
  76   1      }
  77          
  78          /**
  79           * @brief 更新光照显示
  80           * @param lux_value 光照强度值
  81           */
  82          void update_light_display(int lux_value) {
  83   1          // 根据show_mode_flag决定显示模式还是光照信息
  84   1          if (show_mode_flag) {
  85   2              // 模式信息已在Key.c的display_mode_status()中显示
  86   2              // 只需计数器进行计时
  87   2              mode_display_counter++;
  88   2              if (mode_display_counter >= 10) {  // 约2秒后切回光照信息
  89   3                  show_mode_flag = 0;
  90   3                  mode_display_counter = 0;
  91   3                  // 切回光照信息显示
  92   3                  display_light_info(lux_value);
  93   3              }
  94   2          } else {
  95   2              // 显示光照信息
  96   2              LCD_ShowNum(1, 7, lux_value, 4);
  97   2          }
  98   1      }
  99          
 100          /**
 101           * @brief 处理光照状态变化
 102           * @param new_light_state 新的光照状态
 103           * @param current_light_state 当前光照状态(引用)
 104           */
 105          void process_light_state(int new_light_state, int *current_light_state) {
 106   1          // 在自动模式下根据光照强度控制步进电机
 107   1          if (current_mode == MODE_AUTO && !motor_running && new_light_state != *current_light_state) {
 108   2              *current_light_state = new_light_state;
 109   2              
 110   2              if (new_light_state == 1) {
 111   3                  // 光照强，固定顺时针转动
 112   3                  rotate_motor(DIR_CLOCKWISE, REVOLUTIONS);
 113   3              } 
 114   2              else if (new_light_state == 0) {
 115   3                  // 光照正常，固定逆时针转动
 116   3                  rotate_motor(DIR_ANTICLOCKWISE, REVOLUTIONS);
C51 COMPILER V9.57.0.0   LIGHTCONTROL                                                      05/29/2025 22:37:42 PAGE 3   

 117   3              }
 118   2          }
 119   1      } 


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    310    ----
   CONSTANT SIZE    =     50    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14      13
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
